-- Create milk_production table
CREATE TABLE IF NOT EXISTS milk_production (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  total_production DECIMAL(10, 2) NOT NULL,
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Add RLS policies
ALTER TABLE milk_production ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own milk production records"
  ON milk_production FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own milk production records"
  ON milk_production FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own milk production records"
  ON milk_production FOR UPDATE
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own milk production records"
  ON milk_production FOR DELETE
  USING (auth.uid() = user_id);

-- Create indexes
CREATE INDEX milk_production_user_id_idx ON milk_production(user_id);
CREATE INDEX milk_production_date_idx ON milk_production(date);

-- Add triggers for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = TIMEZONE('utc'::text, NOW());
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_milk_production_updated_at
  BEFORE UPDATE ON milk_production
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();
